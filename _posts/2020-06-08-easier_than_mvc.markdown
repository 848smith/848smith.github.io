---
layout: post
title:      "Easier than MVC"
date:       2020-06-09 00:41:16 +0000
permalink:  easier_than_mvc
---


The one thing through Sintra that made it particularily easy to work with was the MVC convention. Being able to map things with set areas on where to do that is great for organization and space. Some of the main reasons this is so helpful is that it makes it easy to plan out how you want to build out an application. Another large reason is that if it is a much larger app then you can have multiple people work on each part. This means that people can easily look at what you are wokring on, read it and then use that to help them. Finally, it is very good to have a universal language or way if doing things so if someone else has to take over they relatively know already what's going on without much research into it.

The M for Models is where you can create special functions for a model but the main thing is to create an association with them. I went into how important these are but the main thing about them is that it lets you use pre-written methods that help cut down on coding time and are more universal. Also, in the models part you can create a helpers class. I used this to be able to pull the current user on the session so you can call it by saying ```User.current_user``` and I made a is logged in method that worked the same. These made it easier to use these important parts of an application without a lot coding everytime. 

The V for Views is where you basically create the side the user will see. This has a lot of HTML and CSS involved in it. It was still interesting to see functions we learned in the beginning with Ruby be important in making the website pages we all use. Having it generate a list by by using iterating over an object with each. This to me has a lot more design in it and is not exactly my forte. I definitely want to learn more of it in the bonus task and online just because it would be great anywhere to know how to design any web page! For now any engineer still needs to work with the basics of the page with the view in order to make sure it all connects.

The C for Controller is where all the magic happens. This in my mind is the most important part of a Software Engineer's job with the MVC. The reason being is that the Models side does not take to much code and when doing the Sinatra Project was probably the quickest and easiest part. Making sure the Models were associated is key but also fairly easy. The Views part is important because we make sure that page will load with the correct stuff. However most of the project or this learning has not been how we design it. It has been just making sure the form, name or attributes correctly load over which a lot is done with the controller. The controller connects the views to a route and also help make the views works. Without explaining what @user is or @pokemon is the view would not be able to use them. It would take a lot more code to use it and in some case you may not be able to at all. This is also where you make sure someone who is not signed into someone's account cannot edit that person's profile, or if you are not logged in you cannot view any of your stuff. To me, this is the most important part cause this is where you may use the association of the model and make sure the view works properly. 

I have so far loved working with Sinatra and cannot wait for Rails. All of this has been a fun challenge which is always good! The MVC I believe will be around in Rails and possibly other languages since it helps organize everything so well.
